version: '3'

networks:
  kong-net:

volumes:
  redis:
    driver: "local"

services:
  kong-migrations:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    command: kong migrations bootstrap
    depends_on:
      - db
    environment:
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
      KONG_PG_HOST: db
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD:-kong}
      KONG_PG_USER: ${KONG_PG_USER:-kong}
    links:
      - db:db
    networks:
      - kong-net
    # restart: on-failure
    restart: unless-stopped

  redis:
    build:
      context: .
      dockerfile: ./redis/images/Dockerfile
    volumes:
      - redis:/data
    depends_on:
      - kong
    networks:
      - kong-net

  konga:
    image: pantsel/konga
    container_name: konga
    depends_on:
      - kong
    environment:
      NODE_ENV: production
    links:
      - kong:kong
    networks:
      - kong-net
    ports:
      - "26025:1337/tcp"
    restart: on-failure
    volumes:
      - ./kongadata:/app/kongadata

  kong:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    container_name: kong
    user: "${KONG_USER:-root}"
    depends_on:
      - db
    environment:
      KONG_CASSANDRA_CONTACT_POINTS: db
      KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
      KONG_PG_HOST: db
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD:-kong}
      KONG_PG_USER: ${KONG_PG_USER:-kong}
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      # KONG_PROXY_ERROR_LOG: /dev/stderr
      # KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_PROXY_LISTEN: 0.0.0.0:8000, 0.0.0.0:8443 http2 ssl
      KONG_LUA_SSL_TRUSTED_CERTIFICATE: system
    networks:
      - kong-net
    ports:
      - "80:8000/tcp"
      - "8001:8001/tcp"
      - "26000:8443/tcp"
      - "8444:8444/tcp"
    # restart: on-failure
    restart: unless-stopped

  db:
    image: postgres:9.5
    environment:
      POSTGRES_DB: ${KONG_PG_DATABASE:-kong}
      POSTGRES_PASSWORD: ${KONG_PG_PASSWORD:-kong}
      POSTGRES_USER: ${KONG_PG_USER:-kong}
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${KONG_PG_USER:-kong}"]
      interval: 30s
      timeout: 30s
      retries: 3
    # restart: on-failure
    restart: unless-stopped
    stdin_open: true
    tty: true
    networks:
      - kong-net
    volumes:
      - ./dbdata:/var/lib/postgresql/data